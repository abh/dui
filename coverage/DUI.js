/* automatically generated by JSCoverage - do not edit */
if (! top._$jscoverage) {
  top._$jscoverage = {};
}
var _$jscoverage = top._$jscoverage;
if (! _$jscoverage['DUI.js']) {
  _$jscoverage['DUI.js'] = [];
  _$jscoverage['DUI.js'][39] = 0;
  _$jscoverage['DUI.js'][42] = 0;
  _$jscoverage['DUI.js'][50] = 0;
  _$jscoverage['DUI.js'][56] = 0;
  _$jscoverage['DUI.js'][57] = 0;
  _$jscoverage['DUI.js'][58] = 0;
  _$jscoverage['DUI.js'][61] = 0;
  _$jscoverage['DUI.js'][66] = 0;
  _$jscoverage['DUI.js'][76] = 0;
  _$jscoverage['DUI.js'][77] = 0;
  _$jscoverage['DUI.js'][78] = 0;
  _$jscoverage['DUI.js'][81] = 0;
  _$jscoverage['DUI.js'][88] = 0;
  _$jscoverage['DUI.js'][90] = 0;
  _$jscoverage['DUI.js'][93] = 0;
  _$jscoverage['DUI.js'][114] = 0;
  _$jscoverage['DUI.js'][115] = 0;
  _$jscoverage['DUI.js'][116] = 0;
  _$jscoverage['DUI.js'][120] = 0;
  _$jscoverage['DUI.js'][121] = 0;
  _$jscoverage['DUI.js'][141] = 0;
  _$jscoverage['DUI.js'][144] = 0;
  _$jscoverage['DUI.js'][146] = 0;
  _$jscoverage['DUI.js'][149] = 0;
  _$jscoverage['DUI.js'][152] = 0;
  _$jscoverage['DUI.js'][153] = 0;
  _$jscoverage['DUI.js'][154] = 0;
  _$jscoverage['DUI.js'][155] = 0;
  _$jscoverage['DUI.js'][157] = 0;
  _$jscoverage['DUI.js'][161] = 0;
  _$jscoverage['DUI.js'][164] = 0;
  _$jscoverage['DUI.js'][165] = 0;
  _$jscoverage['DUI.js'][169] = 0;
  _$jscoverage['DUI.js'][170] = 0;
  _$jscoverage['DUI.js'][173] = 0;
  _$jscoverage['DUI.js'][175] = 0;
  _$jscoverage['DUI.js'][179] = 0;
  _$jscoverage['DUI.js'][184] = 0;
  _$jscoverage['DUI.js'][185] = 0;
  _$jscoverage['DUI.js'][187] = 0;
  _$jscoverage['DUI.js'][191] = 0;
  _$jscoverage['DUI.js'][196] = 0;
  _$jscoverage['DUI.js'][211] = 0;
  _$jscoverage['DUI.js'][213] = 0;
  _$jscoverage['DUI.js'][214] = 0;
  _$jscoverage['DUI.js'][215] = 0;
  _$jscoverage['DUI.js'][217] = 0;
  _$jscoverage['DUI.js'][218] = 0;
  _$jscoverage['DUI.js'][219] = 0;
  _$jscoverage['DUI.js'][221] = 0;
  _$jscoverage['DUI.js'][224] = 0;
  _$jscoverage['DUI.js'][225] = 0;
  _$jscoverage['DUI.js'][227] = 0;
  _$jscoverage['DUI.js'][229] = 0;
  _$jscoverage['DUI.js'][230] = 0;
  _$jscoverage['DUI.js'][232] = 0;
  _$jscoverage['DUI.js'][234] = 0;
  _$jscoverage['DUI.js'][236] = 0;
  _$jscoverage['DUI.js'][239] = 0;
  _$jscoverage['DUI.js'][242] = 0;
  _$jscoverage['DUI.js'][243] = 0;
  _$jscoverage['DUI.js'][246] = 0;
  _$jscoverage['DUI.js'][248] = 0;
  _$jscoverage['DUI.js'][252] = 0;
  _$jscoverage['DUI.js'][256] = 0;
  _$jscoverage['DUI.js'][267] = 0;
  _$jscoverage['DUI.js'][268] = 0;
  _$jscoverage['DUI.js'][271] = 0;
  _$jscoverage['DUI.js'][281] = 0;
  _$jscoverage['DUI.js'][282] = 0;
  _$jscoverage['DUI.js'][283] = 0;
  _$jscoverage['DUI.js'][284] = 0;
  _$jscoverage['DUI.js'][290] = 0;
}
_$jscoverage['DUI.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * DUI: The Digg User Interface Library</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Copyright (c) 2008-2009, Digg, Inc.</span>","<span class=\"c\"> * All rights reserved.</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * Redistribution and use in source and binary forms, with or without </span>","<span class=\"c\"> * modification, are permitted provided that the following conditions are met:</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * - Redistributions of source code must retain the above copyright notice, </span>","<span class=\"c\"> *   this list of conditions and the following disclaimer.</span>","<span class=\"c\"> * - Redistributions in binary form must reproduce the above copyright notice, </span>","<span class=\"c\"> *   this list of conditions and the following disclaimer in the documentation </span>","<span class=\"c\"> *   and/or other materials provided with the distribution.</span>","<span class=\"c\"> * - Neither the name of the Digg, Inc. nor the names of its contributors </span>","<span class=\"c\"> *   may be used to endorse or promote products derived from this software </span>","<span class=\"c\"> *   without specific prior written permission.</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" </span>","<span class=\"c\"> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE </span>","<span class=\"c\"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE </span>","<span class=\"c\"> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE </span>","<span class=\"c\"> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR </span>","<span class=\"c\"> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF </span>","<span class=\"c\"> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS </span>","<span class=\"c\"> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN </span>","<span class=\"c\"> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) </span>","<span class=\"c\"> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE </span>","<span class=\"c\"> * POSSIBILITY OF SUCH DAMAGE.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @module DUI</span>","<span class=\"c\"> * @author Micah Snyder &lt;micah@digg.com&gt;</span>","<span class=\"c\"> * @description The Digg User Interface Library</span>","<span class=\"c\"> * @version 1.0.0</span>","<span class=\"c\"> * @link http://github.com/digg/dui</span>","<span class=\"c\"> *</span>","<span class=\"c\"> */</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>$<span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"c\">/* Create our top-level namespace */</span>","DUI <span class=\"k\">=</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * @function isClass Check so see if the first argument passed in is a DUI Class</span>","<span class=\"c\">     * @param {mixed} check Object to check for classiness.</span>","<span class=\"c\">     * @param {optional Boolean} type Look for a specific type of class. False: dynamic, true: static, (default) null: either type</span>","<span class=\"c\">     */</span>","    isClass<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>check<span class=\"k\">,</span> type<span class=\"k\">)</span>","    <span class=\"k\">{</span>","        type <span class=\"k\">=</span> type <span class=\"k\">===</span> undefined <span class=\"k\">?</span> <span class=\"k\">null</span> <span class=\"k\">:</span> Boolean<span class=\"k\">(</span>type<span class=\"k\">);</span>","        ","        <span class=\"c\">/* if(DUI.global('_ident.library', undefined, check)) {</span>","<span class=\"c\">            </span>","<span class=\"c\">        }; */</span>","        ","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>check<span class=\"k\">.</span>_ident<span class=\"k\">.</span>library <span class=\"k\">==</span> <span class=\"s\">'DUI.Class'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"k\">null</span>","                <span class=\"k\">||</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">&amp;&amp;</span> check<span class=\"k\">.</span>_ident<span class=\"k\">.</span>dynamic<span class=\"k\">)</span>","                <span class=\"k\">||</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>check<span class=\"k\">.</span>_ident<span class=\"k\">.</span>dynamic<span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>noIdentUhOh<span class=\"k\">)</span> <span class=\"k\">{}</span>","        ","        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * @function global Operate on a global namespace</span>","<span class=\"c\">     * @see DUI.Class.prototype.ns</span>","<span class=\"c\">     */</span> ","    global<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>ns<span class=\"k\">,</span> value<span class=\"k\">)</span>","    <span class=\"k\">{</span>","        <span class=\"c\">//DUI.global(['some.namespace', context], value);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>ns<span class=\"k\">.</span>constructor <span class=\"k\">==</span> Array<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> context <span class=\"k\">=</span> ns<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">||</span> undefined<span class=\"k\">;</span>","            ns <span class=\"k\">=</span> ns<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> DUI<span class=\"k\">.</span>Class<span class=\"k\">.</span>prototype<span class=\"k\">.</span>ns<span class=\"k\">.</span>apply<span class=\"k\">(</span>context <span class=\"k\">?</span> context <span class=\"k\">:</span> window<span class=\"k\">,</span> <span class=\"k\">[</span>ns<span class=\"k\">,</span> value<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @class DUI.Class Class creation and management for use with jQuery.</span>","<span class=\"c\"> */</span>","DUI<span class=\"k\">.</span>Class <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span>","<span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_bootstrap<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","<span class=\"k\">}</span>","","$<span class=\"k\">.</span>extend<span class=\"k\">(</span>DUI<span class=\"k\">.</span>Class<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * @var {Array} _dontEnum Internal array of keys to omit when looking through a class' properties. Once the real DontEnum bit is writable we won't have to deal with this.</span>","<span class=\"c\">     */</span>","    _dontEnum<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'prototype'</span><span class=\"k\">,</span> <span class=\"s\">'_dontEnum'</span><span class=\"k\">,</span> <span class=\"s\">'_ident'</span><span class=\"k\">,</span> <span class=\"s\">'_bootstrap'</span><span class=\"k\">,</span> <span class=\"s\">'init'</span><span class=\"k\">,</span> <span class=\"s\">'create'</span><span class=\"k\">,</span> <span class=\"s\">'ns'</span><span class=\"k\">,</span> <span class=\"s\">'each'</span><span class=\"k\">],</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * @var {Object} _ident Internal properties that describe this class</span>","<span class=\"c\">     */</span>","    _ident<span class=\"k\">:</span> <span class=\"k\">{</span>","        library<span class=\"k\">:</span> <span class=\"s\">\"DUI.Class\"</span><span class=\"k\">,</span>","        version<span class=\"k\">:</span> <span class=\"s\">\"1.0.0\"</span><span class=\"k\">,</span>","        dynamic<span class=\"k\">:</span> <span class=\"k\">true</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * @function _bootstrap Return a new class by passing the 'create' method through into a new function.</span>","<span class=\"c\">     * @see DUI.Class.prototype.create</span>","<span class=\"c\">     */</span>","    _bootstrap<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span>","    <span class=\"k\">{</span>","        <span class=\"k\">var</span> copy <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>init<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">.</span>apply<span class=\"k\">(</span>copy<span class=\"k\">);</span>","        ","        $<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">,</span> copy<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>prototype<span class=\"k\">);</span>","        <span class=\"k\">return</span> copy<span class=\"k\">.</span>prototype<span class=\"k\">.</span>create<span class=\"k\">.</span>apply<span class=\"k\">(</span>copy<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * @function init Constructor for created classes. Unused by DUI.Class itself.</span>","<span class=\"c\">     */</span>","    init<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span>","    <span class=\"k\">{}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * @function create Make a class from DUI.Class' prototype. Do work son, do work.</span>","<span class=\"c\">     * Usage 1: new DUI.Class(methods, static);</span>","<span class=\"c\">     * Usage 2: MyClass.create('MySubClass', methods, static);</span>","<span class=\"c\">     * @param {optional String} name Class name for sub-class in Usage 2.</span>","<span class=\"c\">     * @param {optional Object} methods Any number of objects can be passed in as arguments to be added to the class upon creation</span>","<span class=\"c\">     * @param {optional Boolean} static If the last argument is Boolean, it will be treated as the static flag. Defaults to false (dynamic)</span>","<span class=\"c\">     */</span>","    create<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span>","    <span class=\"k\">{</span>","        <span class=\"c\">//For clarity, let's get rid of an instance of \"this\" in the code</span>","        <span class=\"k\">var</span> _class <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        ","        <span class=\"c\">//Get the last argument...</span>","        <span class=\"k\">var</span> s <span class=\"k\">=</span> Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>slice<span class=\"k\">.</span>apply<span class=\"k\">(</span>arguments<span class=\"k\">).</span>reverse<span class=\"k\">()[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"c\">//...and check to see if it's boolean: false (default) = dynamic class, true = static class</span>","        s <span class=\"k\">=</span> s <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> s<span class=\"k\">.</span>constructor <span class=\"k\">==</span> Boolean <span class=\"k\">?</span> s <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        ","        <span class=\"c\">//Static: extend the Object, Dynamic: extend the prototype</span>","        <span class=\"k\">var</span> extendee <span class=\"k\">=</span> s <span class=\"k\">?</span> _class <span class=\"k\">:</span> _class<span class=\"k\">.</span>prototype<span class=\"k\">;</span>","        ","        <span class=\"c\">//Foo.create('Bar', {}) usage</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>constructor <span class=\"k\">==</span> String<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> args <span class=\"k\">=</span> Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","            <span class=\"k\">var</span> name <span class=\"k\">=</span> args<span class=\"k\">.</span>shift<span class=\"k\">();</span>","            _class<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> _class<span class=\"k\">.</span>create<span class=\"k\">.</span>apply<span class=\"k\">(</span>_class<span class=\"k\">,</span> args<span class=\"k\">);</span>","            ","            <span class=\"k\">return</span> _class<span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        ","        <span class=\"c\">//Change the ident for static classes</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>s<span class=\"k\">)</span> _class<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_ident<span class=\"k\">.</span>dynamic <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        ","        <span class=\"c\">//This is where it gets weird: Copy helpers in from the proto</span>","        $<span class=\"k\">.</span>each<span class=\"k\">([</span><span class=\"s\">'_dontEnum'</span><span class=\"k\">,</span> <span class=\"s\">'_ident'</span><span class=\"k\">,</span> <span class=\"s\">'create'</span><span class=\"k\">,</span> <span class=\"s\">'ns'</span><span class=\"k\">,</span> <span class=\"s\">'each'</span><span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            _class<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">]</span> <span class=\"k\">=</span> _class<span class=\"k\">.</span>prototype<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">];</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        <span class=\"c\">//Loop through arguments. If they're the right type, tack them on</span>","        $<span class=\"k\">.</span>each<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> arg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            ","            <span class=\"c\">//Either we're passing in an object full of methods, or an existing class</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>arg<span class=\"k\">.</span>constructor <span class=\"k\">==</span> Object <span class=\"k\">||</span> DUI<span class=\"k\">.</span>isClass<span class=\"k\">(</span>arg<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"c\">//If arg is a dynamic class, pull from its prototype</span>","                <span class=\"k\">var</span> payload <span class=\"k\">=</span> DUI<span class=\"k\">.</span>isClass<span class=\"k\">(</span>arg<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">?</span> arg<span class=\"k\">.</span>prototype <span class=\"k\">:</span> arg<span class=\"k\">;</span>","                ","                <span class=\"c\">/* Here we're going per-property instead of doing $.extend(extendee, this) so that</span>","<span class=\"c\">                 * we overwrite each property instead of the whole namespace. */</span>","                $<span class=\"k\">.</span>each<span class=\"k\">(</span>payload<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span> val<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">/* Note: We're using val instead of this because if val is null,</span>","<span class=\"c\">                     * jQuery.each will apply the iterator such that this == window instead of null */</span>","                     ","                    <span class=\"c\">//If 'dontEnum' is passed in as an array, add its contents to DUI.Class._dontEnum</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>key <span class=\"k\">==</span> <span class=\"s\">'dontEnum'</span> <span class=\"k\">&amp;&amp;</span> val<span class=\"k\">.</span>constructor <span class=\"k\">==</span> Array<span class=\"k\">)</span> <span class=\"k\">{</span>","                        extendee<span class=\"k\">.</span>_dontEnum <span class=\"k\">=</span> $<span class=\"k\">.</span>merge<span class=\"k\">(</span>extendee<span class=\"k\">.</span>_dontEnum<span class=\"k\">,</span> val<span class=\"k\">);</span>","                        ","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"c\">//Add the current property to our class</span>","                    extendee<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> val<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        <span class=\"k\">return</span> _class<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * @function ns Make a namespace within a class</span>","<span class=\"c\">     * Usage 1: MyClass.ns('foo.bar');</span>","<span class=\"c\">     * Usage 2: MyClass.ns('foo.bar', 'baz');</span>","<span class=\"c\">     * @param {String} name Period separated list of namespaces to nest. MyClass.ns('foo.bar') makes MyClass['foo']['bar'].</span>","<span class=\"c\">     * @param {optional mixed} value Set the contents of the deepest specified namespace to this value.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * Usage 3: MyClass.ns({ foo: 1, bar: 2 });</span>","<span class=\"c\">     * @param {Object} contents List of name: value pairs to create. Note that 'foo.bar' syntax does not recurse.</span>","<span class=\"c\">     */</span>","    ns<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span>","    <span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'DUI.Class.ns should probably have some arguments passed to it.'</span><span class=\"k\">);</span>","        ","        <span class=\"k\">var</span> arg <span class=\"k\">=</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">var</span> levels <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> get <span class=\"k\">=</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">||</span> arguments<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> arg<span class=\"k\">.</span>constructor <span class=\"k\">!=</span> Object <span class=\"k\">?</span> <span class=\"k\">true</span> <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span>arg<span class=\"k\">.</span>constructor <span class=\"k\">==</span> String<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> dummy <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            dummy<span class=\"k\">[</span>arg<span class=\"k\">]</span> <span class=\"k\">=</span> arguments<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">?</span> arguments<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> undefined<span class=\"k\">;</span>","            ","            arg <span class=\"k\">=</span> dummy<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span>arg<span class=\"k\">.</span>constructor <span class=\"k\">==</span> Object<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> _class <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> miss <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span> last <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            ","            $<span class=\"k\">.</span>each<span class=\"k\">(</span>arg<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>nsName<span class=\"k\">,</span> nsValue<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">//Reset nsobj back to the top each time</span>","                <span class=\"k\">var</span> nsobj <span class=\"k\">=</span> _class<span class=\"k\">;</span>","                <span class=\"k\">var</span> levels <span class=\"k\">=</span> nsName<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">'.'</span><span class=\"k\">);</span>","                ","                $<span class=\"k\">.</span>each<span class=\"k\">(</span>levels<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> level<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">//First, are we using ns as a getter? Also, did our get attempt fail?</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>get <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> nsobj<span class=\"k\">[</span>level<span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"c\">//Dave's not here, man</span>","                        miss <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        ","                        <span class=\"c\">//Break out of each</span>","                        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"c\">//Ok, so we're setting. Is it time to set yet or do we move on?</span>","                    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>i <span class=\"k\">==</span> levels<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> nsValue<span class=\"k\">)</span> <span class=\"k\">{</span>","                        nsobj<span class=\"k\">[</span>level<span class=\"k\">]</span> <span class=\"k\">=</span> nsValue<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"c\">//...nope, not yet. Check to see if the ns doesn't already exist in our class...</span>","                    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> nsobj<span class=\"k\">[</span>level<span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"c\">//...and make it a new static class</span>","                        nsobj<span class=\"k\">[</span>level<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> DUI<span class=\"k\">.</span>Class<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"c\">//Move one level deeper for the next iteration</span>","                    last <span class=\"k\">=</span> nsobj <span class=\"k\">=</span> nsobj<span class=\"k\">[</span>level<span class=\"k\">];</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"k\">return</span> miss <span class=\"k\">?</span> undefined <span class=\"k\">:</span> last<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * @function each Iterate through a Class' user-defined properties</span>","<span class=\"c\">     * @param {Function} iter Iterator function that takes two optional arguments: key and value</span>","<span class=\"c\">     * @see jQuery.each</span>","<span class=\"c\">     */</span>","    each<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>iter<span class=\"k\">)</span>","    <span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>$<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>iter<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'DUI.Class.each must be called with a function as its first argument.'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> _class <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        ","        <span class=\"c\">//$.each tweaks out on Functions. See: http://dev.jquery.com/ticket/2827</span>","        <span class=\"c\">//TODO: Fixed in 1.3.3, return this to its original state</span>","        <span class=\"c\">/* $.each(this, function(key) {</span>","<span class=\"c\">            if($.inArray(key, _class._dontEnum) != -1) return;</span>","<span class=\"c\">            </span>","<span class=\"c\">            iter.apply(this, [key, this]);</span>","<span class=\"c\">        }); */</span>","        ","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> _class<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>$<span class=\"k\">.</span>inArray<span class=\"k\">(</span>key<span class=\"k\">,</span> _class<span class=\"k\">.</span>_dontEnum<span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> val <span class=\"k\">=</span> _class<span class=\"k\">[</span>key<span class=\"k\">];</span>","                iter<span class=\"k\">.</span>apply<span class=\"k\">(</span>val<span class=\"k\">,</span> <span class=\"k\">[</span>key<span class=\"k\">,</span> val<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","DUI <span class=\"k\">=</span> <span class=\"k\">new</span> DUI<span class=\"k\">.</span>Class<span class=\"k\">(</span>DUI<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">)(</span>jQuery<span class=\"k\">);</span>"];
_$jscoverage['DUI.js'][39]++;
(function ($) {
  _$jscoverage['DUI.js'][42]++;
  DUI = {isClass: (function (check, type) {
  _$jscoverage['DUI.js'][50]++;
  type = type === undefined? null: Boolean(type);
  _$jscoverage['DUI.js'][56]++;
  try {
    _$jscoverage['DUI.js'][57]++;
    if (check._ident.library == "DUI.Class") {
      _$jscoverage['DUI.js'][58]++;
      if (type === null || (type === false && check._ident.dynamic) || (type === true && ! check._ident.dynamic)) {
        _$jscoverage['DUI.js'][61]++;
        return true;
      }
    }
  }
  catch (noIdentUhOh) {
  }
  _$jscoverage['DUI.js'][66]++;
  return false;
}), global: (function (ns, value) {
  _$jscoverage['DUI.js'][76]++;
  if (ns.constructor == Array) {
    _$jscoverage['DUI.js'][77]++;
    var context = ns[1] || undefined;
    _$jscoverage['DUI.js'][78]++;
    ns = ns[0];
  }
  _$jscoverage['DUI.js'][81]++;
  return DUI.Class.prototype.ns.apply(context? context: window, [ns, value]);
})};
  _$jscoverage['DUI.js'][88]++;
  DUI.Class = (function () {
  _$jscoverage['DUI.js'][90]++;
  return this.constructor.prototype._bootstrap.apply(this.constructor, arguments);
});
  _$jscoverage['DUI.js'][93]++;
  $.extend(DUI.Class.prototype, {_dontEnum: ["prototype", "_dontEnum", "_ident", "_bootstrap", "init", "create", "ns", "each"], _ident: {library: "DUI.Class", version: "1.0.0", dynamic: true}, _bootstrap: (function () {
  _$jscoverage['DUI.js'][114]++;
  var copy = (function () {
  _$jscoverage['DUI.js'][115]++;
  return (function () {
  _$jscoverage['DUI.js'][116]++;
  this.init.apply(this, arguments);
});
}).apply(copy);
  _$jscoverage['DUI.js'][120]++;
  $.extend(true, copy.prototype, this.prototype);
  _$jscoverage['DUI.js'][121]++;
  return copy.prototype.create.apply(copy, arguments);
}), init: (function () {
}), create: (function () {
  _$jscoverage['DUI.js'][141]++;
  var _class = this;
  _$jscoverage['DUI.js'][144]++;
  var s = Array.prototype.slice.apply(arguments).reverse()[0] || null;
  _$jscoverage['DUI.js'][146]++;
  s = s !== null && s.constructor == Boolean? s: false;
  _$jscoverage['DUI.js'][149]++;
  var extendee = s? _class: _class.prototype;
  _$jscoverage['DUI.js'][152]++;
  if (arguments.length > 0 && arguments[0].constructor == String) {
    _$jscoverage['DUI.js'][153]++;
    var args = Array.prototype.slice.call(arguments);
    _$jscoverage['DUI.js'][154]++;
    var name = args.shift();
    _$jscoverage['DUI.js'][155]++;
    _class[name] = _class.create.apply(_class, args);
    _$jscoverage['DUI.js'][157]++;
    return _class[name];
  }
  _$jscoverage['DUI.js'][161]++;
  if (s) {
    _$jscoverage['DUI.js'][161]++;
    _class.prototype._ident.dynamic = false;
  }
  _$jscoverage['DUI.js'][164]++;
  $.each(["_dontEnum", "_ident", "create", "ns", "each"], (function () {
  _$jscoverage['DUI.js'][165]++;
  _class[this] = _class.prototype[this];
}));
  _$jscoverage['DUI.js'][169]++;
  $.each(arguments, (function () {
  _$jscoverage['DUI.js'][170]++;
  var arg = this;
  _$jscoverage['DUI.js'][173]++;
  if (arg.constructor == Object || DUI.isClass(arg)) {
    _$jscoverage['DUI.js'][175]++;
    var payload = DUI.isClass(arg, false)? arg.prototype: arg;
    _$jscoverage['DUI.js'][179]++;
    $.each(payload, (function (key, val) {
  _$jscoverage['DUI.js'][184]++;
  if (key == "dontEnum" && val.constructor == Array) {
    _$jscoverage['DUI.js'][185]++;
    extendee._dontEnum = $.merge(extendee._dontEnum, val);
    _$jscoverage['DUI.js'][187]++;
    return;
  }
  _$jscoverage['DUI.js'][191]++;
  extendee[key] = val;
}));
  }
}));
  _$jscoverage['DUI.js'][196]++;
  return _class;
}), ns: (function () {
  _$jscoverage['DUI.js'][211]++;
  if (arguments.length == 0) {
    _$jscoverage['DUI.js'][211]++;
    throw new Error("DUI.Class.ns should probably have some arguments passed to it.");
  }
  _$jscoverage['DUI.js'][213]++;
  var arg = arguments[0];
  _$jscoverage['DUI.js'][214]++;
  var levels = null;
  _$jscoverage['DUI.js'][215]++;
  var get = (arguments.length == 1 || arguments[1] === undefined) && arg.constructor != Object? true: false;
  _$jscoverage['DUI.js'][217]++;
  if (arg.constructor == String) {
    _$jscoverage['DUI.js'][218]++;
    var dummy = {};
    _$jscoverage['DUI.js'][219]++;
    dummy[arg] = arguments[1]? arguments[1]: undefined;
    _$jscoverage['DUI.js'][221]++;
    arg = dummy;
  }
  _$jscoverage['DUI.js'][224]++;
  if (arg.constructor == Object) {
    _$jscoverage['DUI.js'][225]++;
    var _class = this, miss = false, last = this;
    _$jscoverage['DUI.js'][227]++;
    $.each(arg, (function (nsName, nsValue) {
  _$jscoverage['DUI.js'][229]++;
  var nsobj = _class;
  _$jscoverage['DUI.js'][230]++;
  var levels = nsName.split(".");
  _$jscoverage['DUI.js'][232]++;
  $.each(levels, (function (i, level) {
  _$jscoverage['DUI.js'][234]++;
  if (get && typeof nsobj[level] == "undefined") {
    _$jscoverage['DUI.js'][236]++;
    miss = true;
    _$jscoverage['DUI.js'][239]++;
    return false;
  }
  else {
    _$jscoverage['DUI.js'][242]++;
    if (i == levels.length - 1 && nsValue) {
      _$jscoverage['DUI.js'][243]++;
      nsobj[level] = nsValue;
    }
    else {
      _$jscoverage['DUI.js'][246]++;
      if (typeof nsobj[level] == "undefined") {
        _$jscoverage['DUI.js'][248]++;
        nsobj[level] = new DUI.Class(true);
      }
    }
  }
  _$jscoverage['DUI.js'][252]++;
  last = nsobj = nsobj[level];
}));
}));
    _$jscoverage['DUI.js'][256]++;
    return miss? undefined: last;
  }
}), each: (function (iter) {
  _$jscoverage['DUI.js'][267]++;
  if (! $.isFunction(iter)) {
    _$jscoverage['DUI.js'][268]++;
    throw new Error("DUI.Class.each must be called with a function as its first argument.");
  }
  _$jscoverage['DUI.js'][271]++;
  var _class = this;
  _$jscoverage['DUI.js'][281]++;
  for (var key in _class) {
    _$jscoverage['DUI.js'][282]++;
    if ($.inArray(key, _class._dontEnum) == -1) {
      _$jscoverage['DUI.js'][283]++;
      var val = _class[key];
      _$jscoverage['DUI.js'][284]++;
      iter.apply(val, [key, val]);
    }
}
})});
  _$jscoverage['DUI.js'][290]++;
  DUI = new DUI.Class(DUI, true);
})(jQuery);
